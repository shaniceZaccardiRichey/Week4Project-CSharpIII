// <auto-generated />
using System;
using ContactManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactManager.Migrations
{
    [DbContext(typeof(ContactContext))]
    [Migration("20200926222624_Address")]
    partial class Address
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactManager.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Hidden Leaf Village",
                            State = "Land of Fire",
                            Street = "456 Orphan Ave",
                            ZipCode = 12345
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Hidden Leaf Village",
                            State = "Land of Fire",
                            Street = "123 Hidden Leaf Way",
                            ZipCode = 12345
                        });
                });

            modelBuilder.Entity("ContactManager.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Family"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Friend"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Work"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ContactManager.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            AddressId = 0,
                            CategoryId = 1,
                            DateAdded = new DateTime(2020, 9, 26, 17, 26, 24, 531, DateTimeKind.Local).AddTicks(7473),
                            Email = "MaryEllen@yahoo.com",
                            Firstname = "Mary Ellen",
                            Lastname = "Walton",
                            Phone = "555-123-4567"
                        },
                        new
                        {
                            ContactId = 2,
                            AddressId = 0,
                            CategoryId = 2,
                            DateAdded = new DateTime(2020, 9, 26, 17, 26, 24, 534, DateTimeKind.Local).AddTicks(2445),
                            Email = "delores@hotmail.com",
                            Firstname = "Delores",
                            Lastname = "Del Rio",
                            Phone = "555-987-6543"
                        },
                        new
                        {
                            ContactId = 3,
                            AddressId = 0,
                            CategoryId = 3,
                            DateAdded = new DateTime(2020, 9, 26, 17, 26, 24, 534, DateTimeKind.Local).AddTicks(2477),
                            Email = "efren@aol.com",
                            Firstname = "Efren",
                            Lastname = "Herrera",
                            Phone = "555-456-7890"
                        },
                        new
                        {
                            ContactId = 4,
                            AddressId = 1,
                            CategoryId = 2,
                            DateAdded = new DateTime(2020, 9, 26, 17, 26, 24, 534, DateTimeKind.Local).AddTicks(2482),
                            Email = "believeit@gmail.com",
                            Firstname = "Naruto",
                            Lastname = "Uzumaki",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            ContactId = 5,
                            AddressId = 2,
                            CategoryId = 2,
                            DateAdded = new DateTime(2020, 9, 26, 17, 26, 24, 534, DateTimeKind.Local).AddTicks(2674),
                            Email = "angtsy-boi@gmail.com",
                            Firstname = "Sasuke",
                            Lastname = "Uchiha",
                            Phone = "098-765-4321"
                        });
                });

            modelBuilder.Entity("ContactManager.Models.Contact", b =>
                {
                    b.HasOne("ContactManager.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManager.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
